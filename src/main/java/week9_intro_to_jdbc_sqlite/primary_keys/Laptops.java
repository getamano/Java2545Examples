package week9_intro_to_jdbc_sqlite.primary_keys;

import java.sql.*;

import static input.InputUtils.stringInput;


/**
 * Created by clara on 11/10/16.
 * Simple example with integer primary keys that are
 * generated as autoincrement values by the database
 */

public class Laptops {
    
    
    private static final String DB_CONNECTION_URL = "jdbc:sqlite:databases/assets.sqlite";
    
    private final static String LAPTOP_TABLE_NAME = "Laptops";
    private final static String ID_COL = "id";
    private final static String MANUFACTURER_COL = "manufacturer";
    private final static String MODEL_COL = "model";
    
    
    public static void main(String[] args) {
        
        
        createTable();
        insertTestData();
        
        insertNewLaptop();
        findLaptopByModel();
        
    }
    
    
    private static void createTable() {
        
        try (Connection connection = DriverManager.getConnection(DB_CONNECTION_URL);
             Statement createTableStatement = connection.createStatement()) {
            
            //The SQLite to create the laptops table is
            // CREATE TABLE laptops (id INTEGER PRIMARY KEY, manufacturer TEXT, model TEXT);
            String createTableSQLtemplate = "CREATE TABLE IF NOT EXISTS %s (%s INT PRIMARY KEY, %s TEXT, %s TEXT )";
            String createTableSQL = String.format(createTableSQLtemplate, LAPTOP_TABLE_NAME, ID_COL, MANUFACTURER_COL, MODEL_COL, ID_COL);
            System.out.println("The SQL to be executed is: " + createTableSQL);
            
            createTableStatement.execute(createTableSQL);
            
            System.out.println("Created laptop table");
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
        
    }
    
    /* Insert some example data */
    private static void insertTestData() {
    
        String insertSQL = String.format("INSERT INTO %s (%s, %s) VALUES ( ? , ? ) " , LAPTOP_TABLE_NAME, MANUFACTURER_COL, MODEL_COL);   // Don't need to provide a value for the primary key, the database will generate it for you
    
        try (Connection connection = DriverManager.getConnection(DB_CONNECTION_URL);
             PreparedStatement insertTestDataStatement = connection.prepareStatement(insertSQL)) {
            
            // Example of the SQL to execute. The first value, the ID, is not needed - it will be generated by MySQL

            //   INSERT INTO Laptops VALUES ( 'HP', 'Pavilion 510' )
            //   INSERT INTO Laptops VALUES ( 'Apple', 'iMac 2016' )
            
            //Add one row of test data
            insertTestDataStatement.setString(1, "HP");
            insertTestDataStatement.setString(2, "Pavilion 510");
            insertTestDataStatement.execute();
            
            //Add another row of test data
            insertTestDataStatement.setString(1, "Apple");
            insertTestDataStatement.setString(2, "iMac 2016");
            insertTestDataStatement.execute();
            
            System.out.println("Added two rows of test data");
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
    }
    
    
    private static void insertNewLaptop() {
    
        String insertSQL = String.format("INSERT INTO %s (%s, %s ) VALUES ( ? , ?) " , LAPTOP_TABLE_NAME, MANUFACTURER_COL, MODEL_COL);     //Again, ID column value will be generated for us
    
        String manuf = stringInput("Enter manufacturer of new Laptop");
        String model = stringInput("Enter model of new Laptop");
        
        try (Connection connection = DriverManager.getConnection(DB_CONNECTION_URL);
             PreparedStatement insertTestDataStatement = connection.prepareStatement(insertSQL)) {
            
            //Add one row of test data
            insertTestDataStatement.setString(1, manuf);
            insertTestDataStatement.setString(2, model);
            insertTestDataStatement.execute();
            
            System.out.println("Added new Laptop.");
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
    }
    
    
    //An example query. Could write other queries if desired.
    
    private static void findLaptopByModel() {
    
        String searchSQL = String.format("SELECT * FROM %s WHERE %s = ? " , LAPTOP_TABLE_NAME, MODEL_COL);
    
        String modelToFind = stringInput("Enter model name to search for in Laptop table");
        
        try (Connection connection = DriverManager.getConnection(DB_CONNECTION_URL);
             PreparedStatement searchStatement = connection.prepareStatement(searchSQL)) {
            
            searchStatement.setString(1, modelToFind);
            
            ResultSet rs = searchStatement.executeQuery();
            
            System.out.println("Results of your query: ");
            
            while (rs.next()) {
                
                int id = rs.getInt(ID_COL);
                String manf = rs.getString(MANUFACTURER_COL);
                String model = rs.getString(MODEL_COL);
                
                System.out.println(String.format("id = %d Manufacturer = %s Model = %s", id, manf, model));
                
            }
            
            System.out.println("End of results");
            
            rs.close();
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
    }
    
}

