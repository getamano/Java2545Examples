package week9_intro_to_jdbc_sqlite.primary_keys;

import java.sql.*;
import java.util.UUID;

import static input.InputUtils.stringInput;


/**
 * Created by clara on 11/10/16.
 * Simple example with UUID as keys - universal unique ID numbers,
 * A UUID is a 128-bit string represented as hex.
 * UUIDs are 32 characters long and look something like this: 90adda0d-6bbc-4c5e-8fd8-c3e037c3a910
 
 *
 * If using a database like MySQL or SQL Server, you have a UUID() or similar function that can generate
 * UUIDs in the insert query, for example
 * MySQL can generate UUID values by calling the UUID() function
 *
 * INSERT INTO desktops VALUES ( UUID() , 'sony' , 'abc-1234');
 *
 * For SQLite, you need to generate UUIDs in code with Java's UUID library class.
 */


public class Desktops {
    
    private static final String DB_CONNECTION_URL = "jdbc:sqlite:databases/assets.sqlite";
    
    private final static String DESKTOP_TABLE_NAME = "Desktops";
    private final static String ID_COL = "id";
    private final static String MANUFACTURER_COL = "manufacturer";
    private final static String MODEL_COL = "model";

    
    public static void main(String[] args) {
        
        createTable();
        insertTestData();
        
        insertNewDesktop();
        findDesktopByModel();
        
    }
    

    private static void createTable() {
        
        try (Connection connection = DriverManager.getConnection(DB_CONNECTION_URL);
             Statement createTableStatement = connection.createStatement()) {
            
            // Using the NOT NULL constraint ensures there will always be data in the ID column
            // Using the PRIMARY KEY constraint makes sure each row has a unique value for the ID column
            String createTableSqlTemplate = "CREATE TABLE IF NOT EXISTS %s (%s TEXT NOT NULL PRIMARY KEY, %s TEXT, %s TEXT )";
            String createTableSQL = String.format(createTableSqlTemplate, DESKTOP_TABLE_NAME, ID_COL, MANUFACTURER_COL, MODEL_COL, ID_COL);
            System.out.println("The SQL to be executed is: " + createTableSQL);

            createTableStatement.execute(createTableSQL);
            
            System.out.println("Created Desktop table");
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
        
    }
    
    
    
    /* Insert some example data */
    private static void insertTestData() {
    
        String insertSQL = String.format("INSERT INTO %s VALUES ( ? , ? , ?) " , DESKTOP_TABLE_NAME);
        
        try (Connection connection = DriverManager.getConnection(DB_CONNECTION_URL);
             PreparedStatement insertTestDataStatement = connection.prepareStatement(insertSQL)) {
            
            // Example of the SQL to execute. The first value, the ID, will be generated by MySQL by calling MySQL's UUID() function
            //
            //   INSERT INTO Desktops VALUES ( 90adda0d-6bbc-4c5e-8fd8-c3e037c3a910, 'HP', 'Pavilion 510' )
            //   INSERT INTO Desktops VALUES ( 3552da0d-6b5c-235e-14d8-d93137c3a910, 'Apple', 'iMac 2016' )
            
            
            //Add one row of test data
            insertTestDataStatement.setString(1, UUID.randomUUID().toString());
            insertTestDataStatement.setString(2, "HP");
            insertTestDataStatement.setString(3, "Pavilion 510");
            insertTestDataStatement.execute();

            //Add another row of test data
            insertTestDataStatement.setString(1, UUID.randomUUID().toString());
            insertTestDataStatement.setString(2, "Apple");
            insertTestDataStatement.setString(3, "iMac 2016");
            insertTestDataStatement.execute();
            
            System.out.println("Added two rows of test data");
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
    }


    private static void insertNewDesktop() {
    
        String insertSQL = String.format("INSERT INTO %s VALUES ( ? , ? , ?) " , DESKTOP_TABLE_NAME);
    
        String manuf = stringInput("Enter manufacturer of new Desktop");
        String model =stringInput("Enter model of new Desktop");
        
        try ( Connection connection = DriverManager.getConnection(DB_CONNECTION_URL);
              PreparedStatement insertTestDataStatement = connection.prepareStatement(insertSQL)) {
            
            insertTestDataStatement.setString(1, UUID.randomUUID().toString());
            insertTestDataStatement.setString(2, manuf);
            insertTestDataStatement.setString(3, model);
            insertTestDataStatement.execute();

            System.out.println("Added new Desktop.");
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
    }
    
    
    //An example query. Could write other queries if desired.
    
    private static void findDesktopByModel() {
    
        String searchSQL = String.format("SELECT * FROM %s WHERE %s like ? " , DESKTOP_TABLE_NAME, MODEL_COL);
        
        String modelToFind = stringInput("Enter *model* name to search for in Desktop table");
        
        try (Connection connection = DriverManager.getConnection(DB_CONNECTION_URL);
            PreparedStatement searchStatement = connection.prepareStatement(searchSQL)) {
            
            searchStatement.setString(1, modelToFind);
            
            ResultSet rs = searchStatement.executeQuery();
            
            System.out.println("Results of your query: ");
            while (rs.next()) {

                String id = rs.getString(ID_COL);
                String manf = rs.getString(MANUFACTURER_COL);
                String model = rs.getString(MODEL_COL);
                
                System.out.println(String.format("id = %s Manufacturer = %s Model = %s", id, manf, model));
                
            }
            
            System.out.println("End of results");
            
            rs.close();
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
    }
}
