package week10_extra_gui_examples.progress_bar;

import javax.swing.*;
import java.util.Date;
import java.util.List;

/**
 * Created by clara on 12/4/17. SwingWorkers need two types, both optional. The first is the ultimate return type of the
 * entire operation; here, a String; and the type of progress updates that are sent.
 */
public class Worker extends SwingWorker<String, Integer> {
    @Override
    protected String doInBackground() throws Exception {
    
        // A background task with five steps. Progress updates are sent as each of the 5 steps are completed.
        
        for (int x = 1; x <= 5 ; x++) {
            
            Thread.sleep(1000);  //Pretend to do a time-consuming task; actually sleep for 1 second
            
            publish(x);       // This method causes the process() method to be called, can delegate intermediate processing here.
                                // The method must be called with an Integer or Integers, since that's the type defined in the class definition.
            
            // publish(1, 2, 3);    // This would valid as well, the process method will receive these numbers in a list. Look up varargs for more info
            
            setProgress(x);   // This sets a bound property called 'progress'. In the GUI, can attach a
                                // PropertyChangedListener that will be notified whenever this method is called,
                                // and the progress property is changed.
                                // Must be called with an Integer, since that's the progress update type defined in the class definition.
        }
        
        return "All done at " + new Date();      // Must return a String. This can be generated by the background task.
    }
    
    
    @Override
    protected void process(List<Integer> numbers) {

        // called when publish method is called from doInBackground
        System.out.println("The process method was called with: " + numbers);
        
    }
    
    @Override
    protected void done() {
        
        //optional, runs when the entire task is finished.
        System.out.println("Swing worker done method called.");
        
        // This runs on the caller's thread - usually the GUI - so don't do anything time consuming here.
    
        System.out.println("Is completed? " + isDone());
        
        try {
            String result = get();
            System.out.println("The result is " + result);   // Alternatively, can update the GUI
            
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
}
